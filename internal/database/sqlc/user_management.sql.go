// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_management.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, password_hash, email, created_at, updated_at) VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createUserAddress = `-- name: CreateUserAddress :execresult
INSERT INTO user_address (user_id, street_address, house_number, complement, city, zone, district, postal_code, country) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserAddressParams struct {
	UserID        int32
	StreetAddress string
	HouseNumber   sql.NullInt32
	Complement    sql.NullString
	City          string
	Zone          string
	District      sql.NullString
	PostalCode    string
	Country       string
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserAddress,
		arg.UserID,
		arg.StreetAddress,
		arg.HouseNumber,
		arg.Complement,
		arg.City,
		arg.Zone,
		arg.District,
		arg.PostalCode,
		arg.Country,
	)
}

const createUserProfile = `-- name: CreateUserProfile :execresult
INSERT INTO user_profiles (user_id, first_name, last_name, phone_number, address_id, date_of_birth, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserProfileParams struct {
	UserID      int32
	FirstName   sql.NullString
	LastName    sql.NullString
	PhoneNumber sql.NullString
	AddressID   int32
	DateOfBirth sql.NullTime
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserProfile,
		arg.UserID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.AddressID,
		arg.DateOfBirth,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, password_hash, email, created_at, updated_at FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT profile_id, first_name, last_name, phone_number, date_of_birth, created_at, updated_at, user_id, address_id FROM user_profiles
WHERE profile_id = ?
`

func (q *Queries) GetUserProfile(ctx context.Context, profileID int32) (UserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, profileID)
	var i UserProfile
	err := row.Scan(
		&i.ProfileID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.AddressID,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id, username, password_hash, email, created_at, updated_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.PasswordHash,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersProfile = `-- name: GetUsersProfile :many
SELECT profile_id, first_name, last_name, phone_number, date_of_birth, created_at, updated_at, user_id, address_id FROM user_profiles
`

func (q *Queries) GetUsersProfile(ctx context.Context) ([]UserProfile, error) {
	rows, err := q.db.QueryContext(ctx, getUsersProfile)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserProfile
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.AddressID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
